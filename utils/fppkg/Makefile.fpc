#
#   Makefile.fpc for running fpmake
#

[package]
<<<<<<< HEAD
name=fppkg-util
version=3.1.1

[require]
packages=rtl fpmkunit
=======
name=fppkg
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> origin/cpstrnew
version=2.5.1

[target]
programs=fppkg
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> origin/cpstrnew

units=fprepos fpxmlrep pkgoptions pkgglobals pkgmessages pkghandler pkgmkconv pkgdownload pkgfpmake pkgcommands pkgrepos
units_linux=pkgwget  pkglnet
units_beos=pkgwget pkglnet
units_haiku=pkgwget pkglnet
units_freebsd=pkgwget pkglnet
units_netbsd=pkgwget pkglnet
nits_openbsd=pkgwget pkglnet
units_darwin=pkgwget pkglnet
units_iphonesim=pkgwget pkglnet
units_solaris=pkgwget pkglnet
units_win32=pkgwget pkglnet
units_win64=pkgwget pkglnet
units_wince=pkgwget pkglnet
<<<<<<< HEAD
=======
version=2.2.5

[target]
programs=fppkg
=======
version=2.2.5

[target]
programs=fppkg
>>>>>>> origin/fixes_2_2
=======
units=buildfppkg
>>>>>>> origin/fixes_2.4
implicitunits=fprepos fpxmlrep pkgoptions pkgglobals pkgmessages pkghandler pkgmkconv pkgdownload pkgfpmake pkgcommands pkgrepos
implicitunits_linux=pkgwget  pkglnet
implicitunits_beos=pkgwget pkglnet
implicitunits_freebsd=pkgwget pkglnet
implicitunits_netbsd=pkgwget pkglnet
implicitunits_openbsd=pkgwget pkglnet
implicitunits_darwin=pkgwget pkglnet
implicitunits_solaris=pkgwget pkglnet
implicitunits_win32=pkgwget pkglnet
implicitunits_win64=pkgwget pkglnet
implicitunits_wince=pkgwget pkglnet
<<<<<<< HEAD
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2
=======
>>>>>>> origin/cpstrnew
rsts=fprepos fpxmlrep pkgmessages

[compiler]
unitdir=lnet
includedir=lnet/sys

[clean]
units=lcommon lcontrolstack levents ltelnet lftp lhttp lhttputil lnet lstrbuffer
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2

[install]
fpcpackage=y

[default]
fpcdir=../..

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
[prerules]
FPMAKE_BIN_CLEAN=$(wildcard ./fpmake$(SRCEXEEXT))
ifdef OS_TARGET
FPC_TARGETOPT+=--os=$(OS_TARGET)
endif
ifdef CPU_TARGET
FPC_TARGETOPT+=--cpu=$(CPU_TARGET)
endif
LOCALFPMAKE=./fpmake$(SRCEXEEXT)
=======
[require]
packages=fcl-base fcl-xml fcl-process fcl-net paszlib libcurl
tools=data2inc
packages_darwin=univint
packages_iphonesim=univint
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> origin/cpstrnew
=======
[require]
packages=fcl-base fcl-xml fcl-process fcl-net paszlib libcurl
tools=data2inc
>>>>>>> graemeg/fixes_2_2
=======
[require]
packages=fcl-base fcl-xml fcl-process fcl-net paszlib libcurl
tools=data2inc
>>>>>>> origin/fixes_2_2
=======
>>>>>>> origin/cpstrnew

[rules]
# Do not pass the Makefile's unit and binary target locations. Fpmake uses it's own.
override FPCOPT:=$(filter-out -FU%,$(FPCOPT))
override FPCOPT:=$(filter-out -FE%,$(FPCOPT))
# Do not pass the package-unitdirectories. Fpmake adds those and this way they don't apear in the .fpm
override FPCOPT:=$(filter-out $(addprefix -Fu,$(COMPILER_UNITDIR)),$(FPCOPT))# Compose general fpmake-parameters
# Compose general fpmake-parameters
ifdef FPMAKEOPT
FPMAKE_OPT+=$(FPMAKEOPT)
endif
FPMAKE_OPT+=--localunitdir=../..
FPMAKE_OPT+=--globalunitdir=../../packages
FPMAKE_OPT+=$(FPC_TARGETOPT)
FPMAKE_OPT+=$(addprefix -o ,$(FPCOPT))
FPMAKE_OPT+=--compiler=$(FPC)
FPMAKE_OPT+=-bu
.NOTPARALLEL:
<<<<<<< HEAD
<<<<<<< HEAD

fpmake$(SRCEXEEXT): fpmake.pp
	$(FPCFPMAKE) fpmake.pp $(FPMAKE_SKIP_CONFIG) $(addprefix -Fu,$(COMPILER_FPMAKE_UNITDIR)) $(FPCMAKEOPT) $(OPT)
all:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT)
smart:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -XX -o -CX
release:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dRELEASE
debug:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dDEBUG
# If no fpmake exists and (dist)clean is called, do not try to build fpmake, it will
# most often fail because the dependencies are cleared.
# In case of a clean, simply do nothing
ifeq ($(FPMAKE_BIN_CLEAN),)
clean:
else
clean:
	$(FPMAKE_BIN_CLEAN) clean $(FPMAKE_OPT)
endif
# In case of a distclean, perform an 'old'-style distclean. This to avoid problems
# when the package is compiled using fpcmake prior to running this clean using fpmake
ifeq ($(FPMAKE_BIN_CLEAN),)
distclean:	$(addsuffix _distclean,$(TARGET_DIRS)) fpc_cleanall
else
distclean:
ifdef inUnix
        { $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT); if [ $$? != "0" ]; then { echo Something wrong with fpmake exectable. Remove the executable and call make recursively to recover.; $(DEL) $(FPMAKE_BIN_CLEAN); $(MAKE) fpc_cleanall; }; fi;  }
else
        $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT)
endif
	-$(DEL) $(LOCALFPMAKE)
endif
cleanall: distclean
install:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR)
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR)
endif
# distinstall also installs the example-sources and omits the location of the source-
# files from the fpunits.cfg files.
distinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
endif
zipinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX)
zipdistinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) -ie -fsp 0
zipsourceinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=share/src/fpc-\$$\(PACKAGEVERSION\)/$(INSTALL_FPCSUBDIR)/\$$\(PACKAGEDIRECTORY\)
else
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=source\\$(INSTALL_FPCSUBDIR)\\\$$\(PACKAGEDIRECTORY\)
endif
=======
=======
>>>>>>> origin/fixes_2_2
ifneq ($(DATA2INC),)
fpmkunitsrc.inc: $(DEFAULT_FPCDIR)/packages/fpmkunit/src/fpmkunit.pp
        $(DATA2INC) -b -s $(DEFAULT_FPCDIR)/packages/fpmkunit/src/fpmkunit.pp fpmkunitsrc.inc fpmkunitsrc
endif

# Don't include the dependency on fpmkunitsrc.inc by default so we can control
# better when we want to update the internal fpmkunitsrc
fppkg$(EXEEXT): $(wildcard pkg*.pp)
<<<<<<< HEAD
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2
