// Copyright 2015 Google Inc. All Rights Reserved.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code was generated by a protoc plugin.

package com.google.cloud.pubsub.testing.v1;

import com.google.api.common.protobuf.PathTemplate;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.FieldDescriptor.JavaType;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.util.JsonFormat;

import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PubsubJsonGrpcAdapters {
  
  public static class JsonResponse {
    private final int httpCode;
    private final String content;
    
    public JsonResponse(String content) {
      this(200, content);
    }
    
    public JsonResponse(int httpCode, String content) {
      this.httpCode = httpCode;
      this.content = content;
    }
    
    public int getHttpCode() {
      return httpCode;
    }
    
    public String getContent() {
      return content;
    }
    
    @Override
    public String toString() {
      return httpCode + ", " + content;
    }
  }
  
  public static class SubscriberAdapter {
    private final com.google.pubsub.v1.SubscriberGrpc.SubscriberBlockingClient client;
    
    public SubscriberAdapter(com.google.pubsub.v1.SubscriberGrpc.SubscriberBlockingClient client) {
      this.client = client;
    }
    
    public JsonResponse handleRequest(String method, String uri, String body)
        throws InvalidProtocolBufferException {
      final String path = getPath(uri);
      final Map<String, List<String>> params = getQueryParams(uri);
      Map<String, String> values;
      
      if (method.equalsIgnoreCase("PUT")) {
        values = PathTemplate.create("/v1/{name=projects/*/subscriptions/*}").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.Subscription.Builder inputBuilder = com.google.pubsub.v1.Subscription.newBuilder();
          mergeFields(params, com.google.pubsub.v1.Subscription.getDescriptor(), inputBuilder);
          JsonFormat.parser().merge(body, inputBuilder);
          try {
            com.google.pubsub.v1.Subscription output = client.createSubscription(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("GET")) {
        values = PathTemplate.create("/v1/{subscription=projects/*/subscriptions/*}").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.GetSubscriptionRequest.Builder inputBuilder = com.google.pubsub.v1.GetSubscriptionRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.GetSubscriptionRequest.getDescriptor(), inputBuilder);
          try {
            com.google.pubsub.v1.Subscription output = client.getSubscription(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("GET")) {
        values = PathTemplate.create("/v1/{project=projects/*}/subscriptions").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.ListSubscriptionsRequest.Builder inputBuilder = com.google.pubsub.v1.ListSubscriptionsRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.ListSubscriptionsRequest.getDescriptor(), inputBuilder);
          try {
            com.google.pubsub.v1.ListSubscriptionsResponse output = client.listSubscriptions(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("DELETE")) {
        values = PathTemplate.create("/v1/{subscription=projects/*/subscriptions/*}").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.DeleteSubscriptionRequest.Builder inputBuilder = com.google.pubsub.v1.DeleteSubscriptionRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.DeleteSubscriptionRequest.getDescriptor(), inputBuilder);
          try {
            com.google.protobuf.Empty output = client.deleteSubscription(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("POST")) {
        values = PathTemplate.create("/v1/{subscription=projects/*/subscriptions/*}:modifyAckDeadline").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.ModifyAckDeadlineRequest.Builder inputBuilder = com.google.pubsub.v1.ModifyAckDeadlineRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.ModifyAckDeadlineRequest.getDescriptor(), inputBuilder);
          JsonFormat.parser().merge(body, inputBuilder);
          try {
            com.google.protobuf.Empty output = client.modifyAckDeadline(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("POST")) {
        values = PathTemplate.create("/v1/{subscription=projects/*/subscriptions/*}:acknowledge").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.AcknowledgeRequest.Builder inputBuilder = com.google.pubsub.v1.AcknowledgeRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.AcknowledgeRequest.getDescriptor(), inputBuilder);
          JsonFormat.parser().merge(body, inputBuilder);
          try {
            com.google.protobuf.Empty output = client.acknowledge(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("POST")) {
        values = PathTemplate.create("/v1/{subscription=projects/*/subscriptions/*}:pull").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.PullRequest.Builder inputBuilder = com.google.pubsub.v1.PullRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.PullRequest.getDescriptor(), inputBuilder);
          JsonFormat.parser().merge(body, inputBuilder);
          try {
            com.google.pubsub.v1.PullResponse output = client.pull(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("POST")) {
        values = PathTemplate.create("/v1/{subscription=projects/*/subscriptions/*}:modifyPushConfig").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.ModifyPushConfigRequest.Builder inputBuilder = com.google.pubsub.v1.ModifyPushConfigRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.ModifyPushConfigRequest.getDescriptor(), inputBuilder);
          JsonFormat.parser().merge(body, inputBuilder);
          try {
            com.google.protobuf.Empty output = client.modifyPushConfig(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      return null;
    }
  }  // SubscriberAdapter
  
  public static class PublisherAdapter {
    private final com.google.pubsub.v1.PublisherGrpc.PublisherBlockingClient client;
    
    public PublisherAdapter(com.google.pubsub.v1.PublisherGrpc.PublisherBlockingClient client) {
      this.client = client;
    }
    
    public JsonResponse handleRequest(String method, String uri, String body)
        throws InvalidProtocolBufferException {
      final String path = getPath(uri);
      final Map<String, List<String>> params = getQueryParams(uri);
      Map<String, String> values;
      
      if (method.equalsIgnoreCase("PUT")) {
        values = PathTemplate.create("/v1/{name=projects/*/topics/*}").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.Topic.Builder inputBuilder = com.google.pubsub.v1.Topic.newBuilder();
          mergeFields(params, com.google.pubsub.v1.Topic.getDescriptor(), inputBuilder);
          JsonFormat.parser().merge(body, inputBuilder);
          try {
            com.google.pubsub.v1.Topic output = client.createTopic(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("POST")) {
        values = PathTemplate.create("/v1/{topic=projects/*/topics/*}:publish").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.PublishRequest.Builder inputBuilder = com.google.pubsub.v1.PublishRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.PublishRequest.getDescriptor(), inputBuilder);
          JsonFormat.parser().merge(body, inputBuilder);
          try {
            com.google.pubsub.v1.PublishResponse output = client.publish(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("GET")) {
        values = PathTemplate.create("/v1/{topic=projects/*/topics/*}").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.GetTopicRequest.Builder inputBuilder = com.google.pubsub.v1.GetTopicRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.GetTopicRequest.getDescriptor(), inputBuilder);
          try {
            com.google.pubsub.v1.Topic output = client.getTopic(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("GET")) {
        values = PathTemplate.create("/v1/{project=projects/*}/topics").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.ListTopicsRequest.Builder inputBuilder = com.google.pubsub.v1.ListTopicsRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.ListTopicsRequest.getDescriptor(), inputBuilder);
          try {
            com.google.pubsub.v1.ListTopicsResponse output = client.listTopics(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("GET")) {
        values = PathTemplate.create("/v1/{topic=projects/*/topics/*}/subscriptions").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.ListTopicSubscriptionsRequest.Builder inputBuilder = com.google.pubsub.v1.ListTopicSubscriptionsRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.ListTopicSubscriptionsRequest.getDescriptor(), inputBuilder);
          try {
            com.google.pubsub.v1.ListTopicSubscriptionsResponse output = client.listTopicSubscriptions(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      if (method.equalsIgnoreCase("DELETE")) {
        values = PathTemplate.create("/v1/{topic=projects/*/topics/*}").match(path);
        if (values != null) {
          addAll(params, values);
          com.google.pubsub.v1.DeleteTopicRequest.Builder inputBuilder = com.google.pubsub.v1.DeleteTopicRequest.newBuilder();
          mergeFields(params, com.google.pubsub.v1.DeleteTopicRequest.getDescriptor(), inputBuilder);
          try {
            com.google.protobuf.Empty output = client.deleteTopic(inputBuilder.build());
            return new JsonResponse(JsonFormat.printer().print(output));
          } catch (StatusRuntimeException sre) {
            return toJsonError(sre);
          }
        }
      }
      return null;
    }
  }  // PublisherAdapter
  
  private static String getPath(String uri) {
    int delimPos = uri.indexOf('?');
    if (delimPos != -1) {
      return uri.substring(0, delimPos);
    }
    return uri;
  }
  
  private static Map<String, List<String>> getQueryParams(String uri) {
    Map<String, List<String>> params = new HashMap<>();
    int delimPos = uri.indexOf('?');
    if (delimPos != -1 && uri.length() > delimPos + 1) {
      for (String param : uri.substring(delimPos + 1).split("&")) {
        String[] parts = param.split("=", 2);
        if (!params.containsKey(parts[0])) {
          params.put(parts[0], new ArrayList<String>());
        }
        params.get(parts[0]).add(parts.length == 2 ? parts[1] : "");
      }
    }
    return params;
  }
  
  private static void addAll(Map<String, List<String>> target, Map<String, String> source) {
    for (Map.Entry<String, String> entry : source.entrySet()) {
      if (!target.containsKey(entry.getKey())) {
        target.put(entry.getKey(), new ArrayList<String>());
      }
      target.get(entry.getKey()).add(entry.getValue());
    }
  }
  
  private static Object toJavaType(JavaType type, String value) {
    switch (type) {
      case INT:
        return Integer.parseInt(value);
      case LONG:
        return Long.parseLong(value);
      case FLOAT:
        return Float.parseFloat(value);
      case DOUBLE:
        return Double.parseDouble(value);
      case BOOLEAN:
        return Boolean.parseBoolean(value);
      case STRING:
        return value;
      default:
        throw new IllegalArgumentException("Unmapped JavaType: " + type.name());
    }
  }
  
  private static void mergeFields(Map<String, List<String>> params, Descriptor descriptor, Message.Builder builder) {
    for (Map.Entry<String, List<String>> entry : params.entrySet()) {
      FieldDescriptor field = descriptor.findFieldByName(entry.getKey());
      if (field == null) {
        continue;  // Not a message field.
      }
      if (field.isRepeated()) {
        for (String value : entry.getValue()) {
          builder.addRepeatedField(field, toJavaType(field.getJavaType(), value));
        }
      } else {
        builder.setField(field, toJavaType(field.getJavaType(), entry.getValue().get(0)));
      }
    }
  }
  
  private static int toHttpCode(Status.Code statusCode) {
    switch (statusCode) {
      case ABORTED:
        return 409;
      case ALREADY_EXISTS:
        return 409;
      case CANCELLED:
        return 499;
      case DATA_LOSS:
        return 500;
      case DEADLINE_EXCEEDED:
        return 504;
      case FAILED_PRECONDITION:
        return 400;
      case INTERNAL:
        return 500;
      case INVALID_ARGUMENT:
        return 400;
      case NOT_FOUND:
        return 404;
      case OK:
        return 200;
      case OUT_OF_RANGE:
        return 400;
      case PERMISSION_DENIED:
        return 403;
      case RESOURCE_EXHAUSTED:
        return 429;
      case UNAUTHENTICATED:
        return 401;
      case UNAVAILABLE:
        return 503;
      case UNIMPLEMENTED:
        return 501;
      case UNKNOWN:
        return 500;
      default:
        return 500;
    }
  }
  
  private static JsonResponse toJsonError(StatusRuntimeException sre) {
    Status status = sre.getStatus();
    int httpCode = toHttpCode(status.getCode());
    StringBuilder json = new StringBuilder();
    json.append("{");
    json.append("\"error\":{");
    json.append("\"code\":").append(httpCode);
    json.append(", \"message\":\"" + status.getDescription() + "\"");
    json.append(", \"status\":\"" + status.getCode().name() + "\"");
    json.append("}");
    json.append("}");
    return new JsonResponse(httpCode, json.toString());
  }
  
}  // PubsubJsonGrpcAdapters
