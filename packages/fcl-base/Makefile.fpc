#
#   Makefile.fpc for running fpmake
#

[package]
name=fcl-base
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
version=3.1.1

[require]
packages=rtl fpmkunit
=======
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> origin/cpstrnew
version=2.5.1

[require]
packages_darwin=univint
packages_iphonesim=univint
=======
version=2.2.5

[require]
packages_win32=winunits-base winunits-jedi
packages_win64=winunits-base winunits-jedi
>>>>>>> graemeg/fixes_2_2
=======
version=2.2.5

[require]
packages_win32=winunits-base winunits-jedi
packages_win64=winunits-base winunits-jedi
>>>>>>> origin/fixes_2_2
=======
version=2.5.1

[require]
packages_darwin=univint
packages_iphonesim=univint
>>>>>>> origin/cpstrnew

[target]
units=contnrs inifiles rtfpars idea base64 gettext \
      iostream cachecls avl_tree uriparser \
      eventlog custapp wformat whtml wtex rttiutils bufstream \
      streamex blowfish streamio inicol pooledmm libtar streamcoll \
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> origin/cpstrnew
      maskutils fpexprpars ascii85 fptemplate
units_beos=syncobjs
units_haiku=syncobjs
units_freebsd=syncobjs fptimer
units_darwin=syncobjs fptimer
units_iphonesim=syncobjs fptimer
units_solaris=syncobjs fptimer
units_netbsd=  fptimer
units_openbsd= fptimer
units_linux=syncobjs   fptimer
units_win32=fileinfo syncobjs  fptimer
units_win64=fileinfo syncobjs  fptimer
<<<<<<< HEAD
=======
=======
>>>>>>> origin/fixes_2_2
      maskutils fpexprpars
units_beos=syncobjs 
units_freebsd=syncobjs daemonapp fptimer
units_darwin=syncobjs daemonapp fptimer 
units_solaris=syncobjs daemonapp fptimer
units_netbsd=daemonapp fptimer
units_openbsd=daemonapp fptimer
units_linux=syncobjs daemonapp fptimer
units_win32=fileinfo syncobjs daemonapp ServiceManager fptimer
units_win64=fileinfo syncobjs daemonapp ServiceManager fptimer
<<<<<<< HEAD
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2
=======
>>>>>>> origin/cpstrnew
units_wince=fileinfo syncobjs fptimer
# syncobjs requires GetLastOSError function
units_netware=syncobjs
units_netwlibc=syncobjs
rsts=cachecls custapp cgiapp eventlog registry streamcoll inicol

[compiler]
options=-S2h
<<<<<<< HEAD
<<<<<<< HEAD
includedir=src/$(OS_TARGET) src src/dummy
=======
includedir=src/$(OS_TARGET) src
>>>>>>> graemeg/fixes_2_2
=======
includedir=src/$(OS_TARGET) src
>>>>>>> origin/fixes_2_2
includedir_linux=src/unix
includedir_freebsd=src/unix
includedir_darwin=src/unix
includedir_iphonesim=src/unix
includedir_netbsd=src/unix
includedir_openbsd=src/unix
includedir_solaris=src/unix
includedir_qnx=src/unix
includedir_beos=src/unix
includedir_haiku=src/unix
includedir_emx=src/os2
includedir_win32=src/win
includedir_win64=src/win
includedir_wince=src/win
sourcedir=src/$(OS_TARGET) src

[prerules]
ifeq ($(OS_TARGET),win32)
INSTALL_DATADIR=${INSTALL_UNITDIR}
endif
ifeq ($(OS_TARGET),win64)
INSTALL_DATADIR=${INSTALL_UNITDIR}
endif
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2

[install]
fpcpackage=y
files_win32=src/win/fclel.res
files_win64=src/win/fclel.res

[default]
fpcdir=../..

<<<<<<< HEAD
<<<<<<< HEAD
[prerules]
FPMAKE_BIN_CLEAN=$(wildcard ./fpmake$(SRCEXEEXT))
ifdef OS_TARGET
FPC_TARGETOPT+=--os=$(OS_TARGET)
endif
ifdef CPU_TARGET
FPC_TARGETOPT+=--cpu=$(CPU_TARGET)
endif
LOCALFPMAKE=./fpmake$(SRCEXEEXT)

[rules]
# Do not pass the Makefile's unit and binary target locations. Fpmake uses it's own.
override FPCOPT:=$(filter-out -FU%,$(FPCOPT))
override FPCOPT:=$(filter-out -FE%,$(FPCOPT))
# Do not pass the package-unitdirectories. Fpmake adds those and this way they don't apear in the .fpm
override FPCOPT:=$(filter-out $(addprefix -Fu,$(COMPILER_UNITDIR)),$(FPCOPT))# Compose general fpmake-parameters
# Compose general fpmake-parameters
ifdef FPMAKEOPT
FPMAKE_OPT+=$(FPMAKEOPT)
endif
FPMAKE_OPT+=--localunitdir=../..
FPMAKE_OPT+=--globalunitdir=..
FPMAKE_OPT+=$(FPC_TARGETOPT)
FPMAKE_OPT+=$(addprefix -o ,$(FPCOPT))
FPMAKE_OPT+=--compiler=$(FPC)
FPMAKE_OPT+=-bu
.NOTPARALLEL:

fpmake$(SRCEXEEXT): fpmake.pp
	$(FPCFPMAKE) fpmake.pp $(FPMAKE_SKIP_CONFIG) $(addprefix -Fu,$(COMPILER_FPMAKE_UNITDIR)) $(FPCMAKEOPT) $(OPT)
all:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT)
smart:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -XX -o -CX
release:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dRELEASE
debug:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dDEBUG
# If no fpmake exists and (dist)clean is called, do not try to build fpmake, it will
# most often fail because the dependencies are cleared.
# In case of a clean, simply do nothing
ifeq ($(FPMAKE_BIN_CLEAN),)
clean:
else
clean:
	$(FPMAKE_BIN_CLEAN) clean $(FPMAKE_OPT)
endif
# In case of a distclean, perform an 'old'-style distclean. This to avoid problems
# when the package is compiled using fpcmake prior to running this clean using fpmake
ifeq ($(FPMAKE_BIN_CLEAN),)
distclean:	$(addsuffix _distclean,$(TARGET_DIRS)) fpc_cleanall
else
distclean:
ifdef inUnix
        { $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT); if [ $$? != "0" ]; then { echo Something wrong with fpmake exectable. Remove the executable and call make recursively to recover.; $(DEL) $(FPMAKE_BIN_CLEAN); $(MAKE) fpc_cleanall; }; fi;  }
else
        $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT)
endif
	-$(DEL) $(LOCALFPMAKE)
endif
cleanall: distclean
install:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR)
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR)
endif
# distinstall also installs the example-sources and omits the location of the source-
# files from the fpunits.cfg files.
distinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
endif
zipinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX)
zipdistinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) -ie -fsp 0
zipsourceinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=share/src/fpc-\$$\(PACKAGEVERSION\)/$(INSTALL_FPCSUBDIR)/\$$\(PACKAGEDIRECTORY\)
else
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=source\\$(INSTALL_FPCSUBDIR)\\\$$\(PACKAGEDIRECTORY\)
endif
=======
[rules]
.NOTPARALLEL:
>>>>>>> graemeg/fixes_2_2
=======
[rules]
.NOTPARALLEL:
>>>>>>> origin/fixes_2_2
