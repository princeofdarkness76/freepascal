#
<<<<<<< HEAD
<<<<<<< HEAD
#   Makefile.fpc for running fpmake
=======
#   Makefile.fpc for Free Component Library
>>>>>>> graemeg/fixes_2_2
=======
#   Makefile.fpc for Free Component Library
>>>>>>> origin/fixes_2_2
#

[package]
name=graph
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
version=3.1.1

[require]
packages=rtl fpmkunit
=======
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> origin/cpstrnew
=======
>>>>>>> origin/cpstrnew
version=2.5.1

[require]
libc=y
packages_linux=ptc
packages_win32=ptc
packages_win64=ptc
<<<<<<< HEAD
=======
=======
>>>>>>> origin/fixes_2_2
version=2.2.5

[require]
libc=y
<<<<<<< HEAD
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2
=======
>>>>>>> origin/cpstrnew
packages_linux_i386=sdl
packages_linux_powerpc=sdl
packages_freebsd_i386=sdl
packages_win32=sdl
packages_darwin_powerpc=sdl
packages_darwin_i386=sdl

# clean package units
[clean]
units=$(GGIGRAPH_UNIT) $(GRAPH_UNIT)

[target]
dirs=
units=
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
units_linux=$(GRAPH_UNIT) $(GGIGRAPH_UNIT) ptcgraph ptccrt
=======
units_linux=$(GRAPH_UNIT) $(GGIGRAPH_UNIT)
>>>>>>> graemeg/fixes_2_2
=======
units_linux=$(GRAPH_UNIT) $(GGIGRAPH_UNIT)
>>>>>>> origin/fixes_2_2
=======
units_linux=$(GRAPH_UNIT) $(GGIGRAPH_UNIT) ptcgraph ptccrt
>>>>>>> origin/cpstrnew
units_freebsd=graph $(GGIGRAPH_UNIT)
units_win32=graph wincrt winmouse
units_go32v2=graph
units_amiga=graph
units_i386_linux=sdlgraph
units_powerpc_linux=sdlgraph
<<<<<<< HEAD
<<<<<<< HEAD
units_i386_freebsd=sdlgraph
units_win32=sdlgraph
units_powerpc_darwin=sdlgraph
units_i386_darwin=sdlgraph
units_win32=ptcgraph ptccrt
units_win64=ptcgraph ptccrt
<<<<<<< HEAD
=======
=======
>>>>>>> origin/fixes_2_2
units_freebsd=sdlgraph
units_win32=sdlgraph
units_powerpc_darwin=sdlgraph
units_i386_darwin=sdlgraph
<<<<<<< HEAD
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2
=======
>>>>>>> origin/cpstrnew

[compiler]
options=-S2
includedir=src/$(OS_TARGET) src/inc
includedir_linux=src/unix
includedir_freebsd=src/unix
includedir_darwin=src/unix
includedir_netbsd=src/unix
includedir_openbsd=src/unix
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
sourcedir=src/$(OS_TARGET) src/inc src/ptcgraph tests examples
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> origin/cpstrnew
=======
sourcedir=src/$(OS_TARGET) src/inc tests examples
>>>>>>> graemeg/fixes_2_2
=======
sourcedir=src/$(OS_TARGET) src/inc tests examples
>>>>>>> origin/fixes_2_2
=======
sourcedir=src/$(OS_TARGET) src/inc src/ptcgraph tests examples
>>>>>>> origin/cpstrnew

[install]
fpcpackage=y

[default]
fpcdir=../..

<<<<<<< HEAD
<<<<<<< HEAD
[prerules]
FPMAKE_BIN_CLEAN=$(wildcard ./fpmake$(SRCEXEEXT))
ifdef OS_TARGET
FPC_TARGETOPT+=--os=$(OS_TARGET)
endif
ifdef CPU_TARGET
FPC_TARGETOPT+=--cpu=$(CPU_TARGET)
endif
LOCALFPMAKE=./fpmake$(SRCEXEEXT)

[rules]
# Do not pass the Makefile's unit and binary target locations. Fpmake uses it's own.
override FPCOPT:=$(filter-out -FU%,$(FPCOPT))
override FPCOPT:=$(filter-out -FE%,$(FPCOPT))
# Do not pass the package-unitdirectories. Fpmake adds those and this way they don't apear in the .fpm
override FPCOPT:=$(filter-out $(addprefix -Fu,$(COMPILER_UNITDIR)),$(FPCOPT))# Compose general fpmake-parameters
# Compose general fpmake-parameters
ifdef FPMAKEOPT
FPMAKE_OPT+=$(FPMAKEOPT)
endif
FPMAKE_OPT+=--localunitdir=../..
FPMAKE_OPT+=--globalunitdir=..
FPMAKE_OPT+=$(FPC_TARGETOPT)
FPMAKE_OPT+=$(addprefix -o ,$(FPCOPT))
FPMAKE_OPT+=--compiler=$(FPC)
FPMAKE_OPT+=-bu
.NOTPARALLEL:

fpmake$(SRCEXEEXT): fpmake.pp
	$(FPCFPMAKE) fpmake.pp $(FPMAKE_SKIP_CONFIG) $(addprefix -Fu,$(COMPILER_FPMAKE_UNITDIR)) $(FPCMAKEOPT) $(OPT)
all:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT)
smart:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -XX -o -CX
release:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dRELEASE
debug:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dDEBUG
# If no fpmake exists and (dist)clean is called, do not try to build fpmake, it will
# most often fail because the dependencies are cleared.
# In case of a clean, simply do nothing
ifeq ($(FPMAKE_BIN_CLEAN),)
clean:
else
clean:
	$(FPMAKE_BIN_CLEAN) clean $(FPMAKE_OPT)
endif
# In case of a distclean, perform an 'old'-style distclean. This to avoid problems
# when the package is compiled using fpcmake prior to running this clean using fpmake
ifeq ($(FPMAKE_BIN_CLEAN),)
distclean:	$(addsuffix _distclean,$(TARGET_DIRS)) fpc_cleanall
else
distclean:
ifdef inUnix
        { $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT); if [ $$? != "0" ]; then { echo Something wrong with fpmake exectable. Remove the executable and call make recursively to recover.; $(DEL) $(FPMAKE_BIN_CLEAN); $(MAKE) fpc_cleanall; }; fi;  }
else
        $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT)
endif
	-$(DEL) $(LOCALFPMAKE)
endif
cleanall: distclean
install:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR)
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR)
endif
# distinstall also installs the example-sources and omits the location of the source-
# files from the fpunits.cfg files.
distinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
endif
zipinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX)
zipdistinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) -ie -fsp 0
zipsourceinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=share/src/fpc-\$$\(PACKAGEVERSION\)/$(INSTALL_FPCSUBDIR)/\$$\(PACKAGEDIRECTORY\)
else
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=source\\$(INSTALL_FPCSUBDIR)\\\$$\(PACKAGEDIRECTORY\)
endif
=======
=======
>>>>>>> origin/fixes_2_2
[shared]
build=n

[prerules]
GRAPHDIR=src/inc
UNIXINC=src/unix

ifndef USELIBGGI
USELIBGGI=NO
endif

GGIGRAPH_UNIT=ggigraph
GRAPH_UNIT=graph
GRAPHUNIT_DIR=src/$(OS_TARGET)

ifeq ($(OS_TARGET),linux)
GRAPHUNIT_DIR=src/unix
UNIXINCDEPS=$(UNIXINC)/graph16.inc

ifeq ($(CPU_TARGET),powerpc64)
GGIGRAPH_UNIT=
endif

ifneq ($(CPU_TARGET),i386)
GRAPH_UNIT=
endif
endif

ifeq ($(OS_TARGET),freebsd)
GRAPHUNIT_DIR=src/unix
UNIXINCDEPS=$(UNIXINC)/graph16.inc
endif

[rules]
include src/inc/makefile.inc
GRAPHINCDEPS=$(addprefix $(GRAPHDIR)/,$(GRAPHINCNAMES)) $(UNIXINCDEPS)

graph$(PPUEXT) : graph.pp $(GRAPHINCDEPS)
        $(COMPILER) -I$(GRAPHDIR) $(GRAPHUNIT_DIR)/graph.pp

ggigraph$(PPUEXT) : $(UNIXINC)/ggigraph.pp $(GRAPHINCDEPS)
        $(COMPILER) -I$(GRAPHDIR) $(UNIXINC)/ggigraph.pp

winmouse$(PPUEXT) : src/win32/winmouse.pp graph$(PPUEXT)
	$(COMPILER) src/win32/winmouse.pp

wincrt$(PPUEXT) : src/win32/wincrt.pp graph$(PPUEXT)
        $(COMPILER) src/win32/wincrt.pp

sdlgraph$(PPUEXT) : src/sdlgraph/sdlgraph.pp $(GRAPHINCDEPS)
        $(COMPILER) -I$(GRAPHDIR) src/sdlgraph/sdlgraph.pp

.NOTPARALLEL:

<<<<<<< HEAD
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2
