#
<<<<<<< HEAD
<<<<<<< HEAD
#   Makefile.fpc for running fpmake
=======
#   Makefile.fpc for Free Component Library
>>>>>>> graemeg/fixes_2_2
=======
#   Makefile.fpc for Free Component Library
>>>>>>> origin/fixes_2_2
#

[package]
name=fcl-process
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
version=3.1.1

[require]
packages=rtl
=======
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> graemeg/cpstrnew
=======
>>>>>>> origin/cpstrnew
version=2.5.1
=======
version=2.2.5
>>>>>>> graemeg/fixes_2_2
=======
version=2.2.5
>>>>>>> origin/fixes_2_2
=======
version=2.5.1
>>>>>>> origin/cpstrnew

[target]
units=pipes process
units_beos=simpleipc dbugmsg dbugintf
<<<<<<< HEAD
<<<<<<< HEAD
units_haiku=simpleipc dbugmsg dbugintf
units_freebsd=simpleipc dbugmsg dbugintf
units_darwin=simpleipc dbugmsg dbugintf
units_iphonesim=simpleipc dbugmsg dbugintf
<<<<<<< HEAD
=======
units_freebsd=simpleipc dbugmsg dbugintf
units_darwin=simpleipc dbugmsg dbugintf
>>>>>>> graemeg/fixes_2_2
=======
units_freebsd=simpleipc dbugmsg dbugintf
units_darwin=simpleipc dbugmsg dbugintf
>>>>>>> origin/fixes_2_2
=======
>>>>>>> origin/cpstrnew
units_solaris=simpleipc dbugmsg dbugintf
units_netbsd=simpleipc dbugmsg dbugintf
units_openbsd=simpleipc dbugmsg dbugintf
units_linux=simpleipc dbugmsg dbugintf
units_win32=simpleipc dbugmsg dbugintf
units_win64=simpleipc dbugmsg dbugintf
units_wince=simpleipc dbugmsg dbugintf
units_qnx=simpleipc dbugmsg dbugintf
units_os2=simpleipc dbugmsg dbugintf
units_emx=simpleipc dbugmsg dbugintf
rsts=process simpleipc

[compiler]
options=-S2h
includedir=src/$(OS_TARGET) src
<<<<<<< HEAD
<<<<<<< HEAD
includedir_linux=src/unix src/dummy
includedir_freebsd=src/unix src/dummy
includedir_darwin=src/unix src/dummy
includedir_iphonesim=src/unix src/dummy
includedir_netbsd=src/unix src/dummy
includedir_openbsd=src/unix src/dummy
includedir_solaris=src/unix src/dummy
includedir_qnx=src/unix src/dummy
includedir_beos=src/unix src/dummy
includedir_haiku=src/unix src/dummy
includedir_emx=src/os2 src/dummy
includedir_win32=src/win src/dummy
includedir_win64=src/win src/dummy
includedir_wince=src/wince src/dummy
includedir_go32v2=src/dummy
includedir_os2=src/os2 src/dummy
includedir_morphos=src/dummy
includedir_amiga=src/dummy
includedir_netware=src/dummy
includedir_netwlibc=src/dummy
<<<<<<< HEAD
sourcedir=src/$(OS_TARGET) src
>>>>>>> graemeg/cpstrnew
=======
=======
>>>>>>> origin/fixes_2_2
includedir_linux=src/unix
includedir_freebsd=src/unix
includedir_darwin=src/unix
includedir_netbsd=src/unix
includedir_openbsd=src/unix
includedir_solaris=src/unix
includedir_qnx=src/unix
includedir_beos=src/unix
includedir_emx=src/os2
includedir_win32=src/win
includedir_win64=src/win
includedir_wince=src/win
=======
>>>>>>> origin/cpstrnew
sourcedir=src/$(OS_TARGET) src
<<<<<<< HEAD
>>>>>>> graemeg/fixes_2_2
=======
>>>>>>> origin/fixes_2_2

[install]
fpcpackage=y

[default]
fpcdir=../..

<<<<<<< HEAD
<<<<<<< HEAD
[prerules]
FPMAKE_BIN_CLEAN=$(wildcard ./fpmake$(SRCEXEEXT))
ifdef OS_TARGET
FPC_TARGETOPT+=--os=$(OS_TARGET)
endif
ifdef CPU_TARGET
FPC_TARGETOPT+=--cpu=$(CPU_TARGET)
endif
LOCALFPMAKE=./fpmake$(SRCEXEEXT)
# Adding a dependency on fpmkunit is not possbile due to an infinite loop. So
# the fpmkunit-searchpath is added here:
PACKAGEDIR_FPMKUNIT:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FPMKUNIT),)
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE):
        $(MAKE) -C $(PACKAGEDIR_FPMKUNIT) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE)
endif
else
PACKAGEDIR_FPMKUNIT=
UNITDIR_FPMKUNIT:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FPMKUNIT),)
UNITDIR_FPMKUNIT:=$(firstword $(UNITDIR_FPMKUNIT))
else
UNITDIR_FPMKUNIT=
endif
endif
ifdef UNITDIR_FPMAKE_FPMKUNIT
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FPMKUNIT)
endif

[rules]
# Do not pass the Makefile's unit and binary target locations. Fpmake uses it's own.
override FPCOPT:=$(filter-out -FU%,$(FPCOPT))
override FPCOPT:=$(filter-out -FE%,$(FPCOPT))
# Do not pass the package-unitdirectories. Fpmake adds those and this way they don't apear in the .fpm
override FPCOPT:=$(filter-out $(addprefix -Fu,$(COMPILER_UNITDIR)),$(FPCOPT))# Compose general fpmake-parameters
# Compose general fpmake-parameters
ifdef FPMAKEOPT
FPMAKE_OPT+=$(FPMAKEOPT)
endif
FPMAKE_OPT+=--localunitdir=../..
FPMAKE_OPT+=--globalunitdir=..
FPMAKE_OPT+=$(FPC_TARGETOPT)
FPMAKE_OPT+=$(addprefix -o ,$(FPCOPT))
FPMAKE_OPT+=--compiler=$(FPC)
FPMAKE_OPT+=-bu
.NOTPARALLEL:

fpmake$(SRCEXEEXT): fpmake.pp
	$(FPCFPMAKE) fpmake.pp $(FPMAKE_SKIP_CONFIG) $(addprefix -Fu,$(COMPILER_FPMAKE_UNITDIR)) $(FPCMAKEOPT) $(OPT)
all:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT)
smart:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -XX -o -CX
release:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dRELEASE
debug:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) compile $(FPMAKE_OPT) -o -dDEBUG
# If no fpmake exists and (dist)clean is called, do not try to build fpmake, it will
# most often fail because the dependencies are cleared.
# In case of a clean, simply do nothing
ifeq ($(FPMAKE_BIN_CLEAN),)
clean:
else
clean:
	$(FPMAKE_BIN_CLEAN) clean $(FPMAKE_OPT)
endif
# In case of a distclean, perform an 'old'-style distclean. This to avoid problems
# when the package is compiled using fpcmake prior to running this clean using fpmake
ifeq ($(FPMAKE_BIN_CLEAN),)
distclean:	$(addsuffix _distclean,$(TARGET_DIRS)) fpc_cleanall
else
distclean:
ifdef inUnix
        { $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT); if [ $$? != "0" ]; then { echo Something wrong with fpmake exectable. Remove the executable and call make recursively to recover.; $(DEL) $(FPMAKE_BIN_CLEAN); $(MAKE) fpc_cleanall; }; fi;  }
else
        $(FPMAKE_BIN_CLEAN) distclean $(FPMAKE_OPT)
endif
	-$(DEL) $(LOCALFPMAKE)
endif
cleanall: distclean
install:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR)
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR)
endif
# distinstall also installs the example-sources and omits the location of the source-
# files from the fpunits.cfg files.
distinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_PREFIX) --baseinstalldir=$(INSTALL_LIBDIR)/fpc/$(FPC_VERSION) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
else
	$(LOCALFPMAKE) install $(FPMAKE_OPT) --prefix=$(INSTALL_BASEDIR) --baseinstalldir=$(INSTALL_BASEDIR) --unitinstalldir=$(INSTALL_UNITDIR) -ie -fsp 0
endif
zipinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX)
zipdistinstall:	fpmake$(SRCEXEEXT)
	$(LOCALFPMAKE) zipinstall $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) -ie -fsp 0
zipsourceinstall:	fpmake$(SRCEXEEXT)
ifdef UNIXHier
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=share/src/fpc-\$$\(PACKAGEVERSION\)/$(INSTALL_FPCSUBDIR)/\$$\(PACKAGEDIRECTORY\)
else
	$(LOCALFPMAKE) archive $(FPMAKE_OPT) --zipprefix=$(DIST_DESTDIR)/$(ZIPPREFIX) --prefix=source\\$(INSTALL_FPCSUBDIR)\\\$$\(PACKAGEDIRECTORY\)
endif
=======
[rules]
.NOTPARALLEL:
>>>>>>> graemeg/fixes_2_2
=======
[rules]
.NOTPARALLEL:
>>>>>>> origin/fixes_2_2
